name: Docker Publish
on:
  push:
    branches:
      - main
    tags:
      - v*.*.*
  pull_request:
  workflow_dispatch: # Allows manual triggering
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: d34dplayer/grognon-
jobs:
  build:
    name: Build ${{ matrix.app.name }} on ${{ matrix.platform.alias }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - docker_platform: linux/amd64
            worker: ubuntu-latest
            alias: amd64
          - docker_platform: linux/arm64/v8
            worker: ubuntu-24.04-arm
            alias: arm64
        app:
          - name: core
            target: runner-go
          - name: ssr
            target: runner-node
    runs-on: ${{matrix.platform.worker}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Decide output string
        id: output_string
        run: |
          OUTPUT="type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.app.name }}"
          EVENT_NAME=${{github.event_name}}
          test $EVENT_NAME != "pull_request" && OUTPUT=${OUTPUT},push-by-digest=true,name-canonical=true,push=true
          echo "output=$OUTPUT" >> "$GITHUB_OUTPUT"
      - name: Extract metadata (labels)
        id: meta
        uses: docker/metadata-action@v5
      - name: Build and push by digest
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: ${{ matrix.app.target }}
          platforms: ${{ matrix.platform.docker_platform }}
          # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: ${{ steps.output_string.outputs.output }}
      - name: Export digest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ${{runner.temp}}/digests
          rm -f ${{runner.temp}}/digests/*
          digest="${{steps.docker_build.outputs.digest}}"
          touch "${{runner.temp}}/digests/${digest#sha256:}"
      - name: Upload digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{matrix.app.name}}-${{matrix.platform.alias}}
          path: ${{runner.temp}}/digests/*
          if-no-files-found: error
          retention-days: 1
  merge-and-push:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    name: Merge digests for ${{matrix.app}}
    strategy:
      matrix:
        app:
          - ssr
          - core
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{runner.temp}}/digests
          pattern: digests-${{matrix.app}}-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.app }}
          tags: |
            type=schedule
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Create manifest list and push
        working-directory: ${{runner.temp}}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.app }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.app }}:${{ steps.meta.outputs.version }}
